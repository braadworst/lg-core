(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){"use strict";function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step("next",value)},function(err){step("throw",err)})}}return step("next")})}}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i]}return arr2}else{return Array.from(arr)}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}var check=require("check-types");module.exports=function(environmentId){var runMiddlewareStack=function(){var _ref=_asyncToGenerator(regeneratorRuntime.mark(function _callee2(){var update,mergeRelay,_thunkifyMiddleware,matchValue,updateType,_environment,_done,_noMatch,_error;return regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:update=updateStack.shift();if(!update){_context2.next=26;break}mergeRelay=function mergeRelay(){var defined=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};check.assert.object(defined,"Relay additions need to be an object");check.assert.not.assigned(defined.extensions,"Cannot assign extensions as a relay property, this is a reserved property");check.assert.not.assigned(defined.exit,"Cannot assign exit as a relay property, this is a reserved property");check.assert.not.assigned(defined.update,"Cannot assign update as a relay property, this is a reserved property");check.assert.not.assigned(defined.parameters,"Cannot assign parameters as a relay property, this is a reserved property");relay=Object.assign({},relay,defined)};_thunkifyMiddleware=function _thunkifyMiddleware(id){var final=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var callback=availableMiddleware[id];check.assert.assigned(callback,"Middleware "+id+" not found");check.assert.function(callback,"Middleware needs to be a function");return function(){var _ref2=_asyncToGenerator(regeneratorRuntime.mark(function _callee(defined){var next,parameters;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;mergeRelay(defined);next=middlewareStack.length===0?function(defined){mergeRelay(defined);runMiddlewareStack()}:_thunkifyMiddleware(middlewareStack.shift(),final);parameters=[next,relay].concat(_toConsumableArray(update.parameters));if(traditional.indexOf(id)>-1&&relay.error){parameters=[].concat(_toConsumableArray(update.parameters),[next,relay.error])}else if(traditional.indexOf(id)>-1){parameters=[].concat(_toConsumableArray(update.parameters),[next])}_context.next=7;return callback.apply(undefined,_toConsumableArray(parameters));case 7:_context.next=22;break;case 9:_context.prev=9;_context.t0=_context["catch"](0);if(!final){_context.next=15;break}console.error(_context.t0);_context.next=22;break;case 15:relay={error:_context.t0,extensions:extensions,update:updateRelay,exit:exit};middlewareStack=_error;if(middlewareStack.length===0){console.warn('No "error" middleware found');console.error(_context.t0)}middlewareStack=[].concat(_toConsumableArray(middlewareStack),_toConsumableArray(_done));if(!(middlewareStack.length>0)){_context.next=22;break}_context.next=22;return _thunkifyMiddleware(middlewareStack.shift(),true)();case 22:case"end":return _context.stop()}}},_callee,this,[[0,9]])}));return function(_x9){return _ref2.apply(this,arguments)}}()};if(resetAfterCycle||!relay){relay={extensions:extensions,update:updateRelay,exit:exit}}middlewareStackRunning=true;check.assert.assigned(update.options.matchValue,"Update function cannot find a matchValue");matchValue=selectedParser.parse(update.options.matchValue);relay=Object.assign({},relay,{parameters:matchValue.parameters});matchValue=matchValue.path;updateType=update.options.updateType?update.options.updateType:defaultUpdateType;_environment=environments[executingEnvironmentId];_done=_environment.done[updateType]?_environment.done[updateType]:[];_noMatch=_environment.noMatch[updateType]?_environment.noMatch[updateType]:[];_error=_environment.error[updateType]?_environment.error[updateType]:[];middlewareStack=_environment.run[updateType]?_environment.run[updateType].filter(function(middleware){return middleware.matchValue===matchValue||middleware.matchValue==="*"}).map(function(middleware){return middleware.middlewareId}):[];if(middlewareStack.length===0){console.warn("No middleware could be matched for matchValue: "+matchValue+" and updateType: "+updateType);middlewareStack=_noMatch}middlewareStack=[].concat(_toConsumableArray(middlewareStack),_toConsumableArray(_done));if(!(middlewareStack.length>0)){_context2.next=23;break}_context2.next=21;return _thunkifyMiddleware(middlewareStack.shift())();case 21:_context2.next=24;break;case 23:runMiddlewareStack();case 24:_context2.next=27;break;case 26:middlewareStackRunning=false;case 27:case"end":return _context2.stop()}}},_callee2,this)}));return function runMiddlewareStack(){return _ref.apply(this,arguments)}}();var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var defaultUpdateType="GET";var middlewareStackRunning=false;var middlewareStack=[];var updateStack=[];var relay=void 0;var selectedParser={add:function add(){},parse:function parse(matchValue){return{path:matchValue,parameters:{}}}};var resetAfterCycle=true;var traditional=[];var extensions={};var availableMiddleware={};var executingEnvironmentId=environmentId;var selectedEnvironmentIds=[environmentId];var environments=_defineProperty({},environmentId,environment(environmentId));var exposed={extension:extension,middleware:middleware,where:where,run:run,error:error,noMatch:noMatch,done:done,update:update,parser:parser};if(options.resetAfterCycle!==undefined){check.assert.boolean(options.resetAfterCycle,"resetAfterCycle needs to be a boolean");resetAfterCycle=options.resetAfterCycle}function environment(id){check.assert.not.undefined(id,"Environment id cannot be empty");check.assert.match(id,/^[a-z0-9]+$/i,"Environment id needs to be a string containing only letters and or numbers");return{id:id,run:{},noMatch:{},error:{},done:{}}}function parser(parser){check.assert.function(parser.add,'Parser needs to have a method called "add"');check.assert.function(parser.parse,'Parser needs to have a method called "parse"');selectedParser=parser;return exposed}function extension(id,extension){var isUpdater=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;check.assert.not.undefined(id,"Extension id cannot be empty");check.assert.not.undefined(extension,"Extension cannot be empty");check.assert.match(id,/^[a-z0-9]+$/i,"Extension id needs to be a string containing only letters and or numbers");check.assert.not.assigned(extensions[id],'"'+id+'" has already been defined as an extension');extensions[id]=isUpdater?extension(update):extension;return exposed}function middleware(newMiddleware){for(var _len=arguments.length,traditionals=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){traditionals[_key-1]=arguments[_key]}check.assert.nonEmptyObject(newMiddleware,"Provided middleware needs to be a non empty object");Object.keys(newMiddleware).forEach(function(id){check.assert.not.assigned(availableMiddleware[id],'"'+id+'" has already been defined as middleware');check.assert.function(newMiddleware[id],'"'+id+'" middleware is not a function')});if(traditionals.length){check.assert.array.of.string(traditionals,"All traditional middleware names need to be strings");traditionals.forEach(function(id,index){check.assert.equal(traditionals.indexOf(id),index,'Duplicate values found for traditional middleware "'+id+'"');check.assert.equal(traditional.indexOf(id),-1,'"'+id+'" has already been defined as a traditional middleware function')});traditional=[].concat(_toConsumableArray(traditional),traditionals)}availableMiddleware=Object.assign({},availableMiddleware,newMiddleware);return exposed}function where(){for(var _len2=arguments.length,environmentIds=Array(_len2),_key2=0;_key2<_len2;_key2++){environmentIds[_key2]=arguments[_key2]}check.assert.greater(environmentIds.length,0,"Where method missing parameters");environmentIds.forEach(function(id){check.assert.not.undefined(id,"Environment id cannot be empty");check.assert.match(id,/^[a-z0-9]+$/i,"Environment id needs to be a string containing only letters and or numbers");if(!environments[id]){environments[id]=environment(id)}});selectedEnvironmentIds=environmentIds;return exposed}function run(matchValue,middlewareId){var updateType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:defaultUpdateType;check.assert.not.undefined(matchValue,"Match value cannot be empty");check.assert.string(matchValue,"Match value needs to be a string");check.assert.not.undefined(middlewareId,"Middleware id cannot be empty");check.assert.match(middlewareId,/^[a-z0-9\.]+$/i,'Middleware id needs to be a string containing only letters,numbers and an optional "."');check.assert.match(updateType,/^[a-z0-9]+$/i,"Update type needs to be a string containing only letters and or numbers");selectedParser.add(matchValue);selectedEnvironmentIds.forEach(function(id){Array.isArray(environments[id].run[updateType])?environments[id].run[updateType].push({middlewareId:middlewareId,matchValue:matchValue}):environments[id].run[updateType]=[{middlewareId:middlewareId,matchValue:matchValue}]});return exposed}function error(middlewareId){var updateType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultUpdateType;check.assert.not.undefined(middlewareId,"Middleware id cannot be empty");check.assert.match(updateType,/^[a-z0-9]+$/i,"Update type needs to be a string containing only letters and or numbers");check.assert.match(middlewareId,/^[a-z0-9\.]+$/i,'Middleware id needs to be a string containing only letters,numbers and an optional "."');selectedEnvironmentIds.forEach(function(id){Array.isArray(environments[id].error[updateType])?environments[id].error[updateType].push(middlewareId):environments[id].error[updateType]=[middlewareId]});return exposed}function noMatch(middlewareId){var updateType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultUpdateType;check.assert.not.undefined(middlewareId,"Middleware id cannot be empty");check.assert.match(updateType,/^[a-z0-9]+$/i,"Update type needs to be a string containing only letters and or numbers");check.assert.match(middlewareId,/^[a-z0-9\.]+$/i,'Middleware id needs to be a string containing only letters,numbers and an optional "."');selectedEnvironmentIds.forEach(function(id){Array.isArray(environments[id].noMatch[updateType])?environments[id].noMatch[updateType].push(middlewareId):environments[id].noMatch[updateType]=[middlewareId]});return exposed}function done(middlewareId){var updateType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultUpdateType;check.assert.not.undefined(middlewareId,"Middleware id cannot be empty");check.assert.match(updateType,/^[a-z0-9]+$/i,"Update type needs to be a string containing only letters and or numbers");check.assert.match(middlewareId,/^[a-z0-9\.]+$/i,'Middleware id needs to be a string containing only letters,numbers and an optional "."');selectedEnvironmentIds.forEach(function(id){Array.isArray(environments[id].done[updateType])?environments[id].done[updateType].push(middlewareId):environments[id].done[updateType]=[middlewareId]});return exposed}function update(options){for(var _len3=arguments.length,parameters=Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){parameters[_key3-1]=arguments[_key3]}updateStack.push({options:options,parameters:parameters});if(middlewareStackRunning===false){runMiddlewareStack()}return exposed}function updateRelay(options){updateStack.push({options:options,parameters:[]});if(middlewareStackRunning===false){runMiddlewareStack()}}function exit(){middlewareStack=[];runMiddlewareStack()}return exposed}},{"check-types":2}],2:[function(require,module,exports){(function(globals){"use strict";var strings,messages,predicates,functions,assert,not,maybe,collections,slice;strings={v:"value",n:"number",s:"string",b:"boolean",o:"object",t:"type",a:"array",al:"array-like",i:"iterable",d:"date",f:"function",l:"length"};messages={};predicates={};[{n:"equal",f:equal,s:"v"},{n:"undefined",f:isUndefined,s:"v"},{n:"null",f:isNull,s:"v"},{n:"assigned",f:assigned,s:"v"},{n:"includes",f:includes,s:"v"},{n:"zero",f:zero},{n:"infinity",f:infinity},{n:"number",f:number},{n:"integer",f:integer},{n:"even",f:even},{n:"odd",f:odd},{n:"greater",f:greater},{n:"less",f:less},{n:"between",f:between},{n:"greaterOrEqual",f:greaterOrEqual},{n:"lessOrEqual",f:lessOrEqual},{n:"inRange",f:inRange},{n:"positive",f:positive},{n:"negative",f:negative},{n:"string",f:string,s:"s"},{n:"emptyString",f:emptyString,s:"s"},{n:"nonEmptyString",f:nonEmptyString,s:"s"},{n:"contains",f:contains,s:"s"},{n:"match",f:match,s:"s"},{n:"boolean",f:boolean,s:"b"},{n:"object",f:object,s:"o"},{n:"emptyObject",f:emptyObject,s:"o"},{n:"nonEmptyObject",f:nonEmptyObject,s:"o"},{n:"instanceStrict",f:instanceStrict,s:"t"},{n:"instance",f:instance,s:"t"},{n:"like",f:like,s:"t"},{n:"array",f:array,s:"a"},{n:"emptyArray",f:emptyArray,s:"a"},{n:"nonEmptyArray",f:nonEmptyArray,s:"a"},{n:"arrayLike",f:arrayLike,s:"al"},{n:"iterable",f:iterable,s:"i"},{n:"date",f:date,s:"d"},{n:"function",f:isFunction,s:"f"},{n:"hasLength",f:hasLength,s:"l"}].map(function(data){var n=data.n;messages[n]="Invalid "+strings[data.s||"n"];predicates[n]=data.f});functions={apply:apply,map:map,all:all,any:any};collections=["array","arrayLike","iterable","object"];slice=Array.prototype.slice;functions=mixin(functions,predicates);assert=createModifiedPredicates(assertModifier,assertImpl);not=createModifiedPredicates(notModifier,notImpl);maybe=createModifiedPredicates(maybeModifier,maybeImpl);assert.not=createModifiedModifier(assertModifier,not);assert.maybe=createModifiedModifier(assertModifier,maybe);collections.forEach(createOfPredicates);createOfModifiers(assert,assertModifier);createOfModifiers(not,notModifier);collections.forEach(createMaybeOfModifiers);exportFunctions(mixin(functions,{assert:assert,not:not,maybe:maybe}));function equal(lhs,rhs){return lhs===rhs}function isUndefined(data){return data===undefined}function isNull(data){return data===null}function assigned(data){return!isUndefined(data)&&!isNull(data)}function zero(data){return data===0}function infinity(data){return data===Number.POSITIVE_INFINITY||data===Number.NEGATIVE_INFINITY}function number(data){return typeof data==="number"&&isNaN(data)===false&&data!==Number.POSITIVE_INFINITY&&data!==Number.NEGATIVE_INFINITY}function integer(data){return number(data)&&data%1===0}function even(data){return number(data)&&data%2===0}function odd(data){return integer(data)&&!even(data)}function greater(lhs,rhs){return number(lhs)&&lhs>rhs}function less(lhs,rhs){return number(lhs)&&lhs<rhs}function between(data,x,y){if(x<y){return greater(data,x)&&less(data,y)}return less(data,x)&&greater(data,y)}function greaterOrEqual(lhs,rhs){return number(lhs)&&lhs>=rhs}function lessOrEqual(lhs,rhs){return number(lhs)&&lhs<=rhs}function inRange(data,x,y){if(x<y){return greaterOrEqual(data,x)&&lessOrEqual(data,y)}return lessOrEqual(data,x)&&greaterOrEqual(data,y)}function positive(data){return greater(data,0)}function negative(data){return less(data,0)}function string(data){return typeof data==="string"}function emptyString(data){return data===""}function nonEmptyString(data){return string(data)&&data!==""}function contains(data,substring){return string(data)&&data.indexOf(substring)!==-1}function match(data,regex){return string(data)&&!!data.match(regex)}function boolean(data){return data===false||data===true}function object(data){return Object.prototype.toString.call(data)==="[object Object]"}function emptyObject(data){return object(data)&&Object.keys(data).length===0}function nonEmptyObject(data){return object(data)&&Object.keys(data).length>0}function instanceStrict(data,prototype){try{return data instanceof prototype}catch(error){return false}}function instance(data,prototype){try{return instanceStrict(data,prototype)||data.constructor.name===prototype.name||Object.prototype.toString.call(data)==="[object "+prototype.name+"]"}catch(error){return false}}function like(data,archetype){var name;for(name in archetype){if(archetype.hasOwnProperty(name)){if(data.hasOwnProperty(name)===false||typeof data[name]!==typeof archetype[name]){return false}if(object(data[name])&&like(data[name],archetype[name])===false){return false}}}return true}function array(data){return Array.isArray(data)}function emptyArray(data){return array(data)&&data.length===0}function nonEmptyArray(data){return array(data)&&data.length>0}function arrayLike(data){return assigned(data)&&number(data.length)}function iterable(data){if(typeof Symbol==="undefined"){return arrayLike(data)}return assigned(data)&&isFunction(data[Symbol.iterator])}function includes(data,value){var iterator,iteration;if(not.assigned(data)){return false}try{if(typeof Symbol!=="undefined"&&data[Symbol.iterator]&&isFunction(data.values)){iterator=data.values();do{iteration=iterator.next();if(iteration.value===value){return true}}while(!iteration.done);return false}Object.keys(data).forEach(function(key){if(data[key]===value){throw 0}})}catch(ignore){return true}return false}function hasLength(data,length){return assigned(data)&&data.length===length}function date(data){try{return instance(data,Date)&&integer(data.getTime())}catch(error){return false}}function isFunction(data){return typeof data==="function"}function apply(data,predicates){assert.array(data);if(isFunction(predicates)){return data.map(function(value){return predicates(value)})}assert.array(predicates);assert.hasLength(data,predicates.length);return data.map(function(value,index){return predicates[index](value)})}function map(data,predicates){assert.object(data);if(isFunction(predicates)){return mapSimple(data,predicates)}assert.object(predicates);return mapComplex(data,predicates)}function mapSimple(data,predicate){var result={};Object.keys(data).forEach(function(key){result[key]=predicate(data[key])});return result}function mapComplex(data,predicates){var result={};Object.keys(predicates).forEach(function(key){var predicate=predicates[key];if(isFunction(predicate)){if(not.assigned(data)){result[key]=!!predicate.m}else{result[key]=predicate(data[key])}}else if(object(predicate)){result[key]=mapComplex(data[key],predicate)}});return result}function all(data){if(array(data)){return testArray(data,false)}assert.object(data);return testObject(data,false)}function testArray(data,result){var i;for(i=0;i<data.length;i+=1){if(data[i]===result){return result}}return!result}function testObject(data,result){var key,value;for(key in data){if(data.hasOwnProperty(key)){value=data[key];if(object(value)&&testObject(value,result)===result){return result}if(value===result){return result}}}return!result}function any(data){if(array(data)){return testArray(data,true)}assert.object(data);return testObject(data,true)}function mixin(target,source){Object.keys(source).forEach(function(key){target[key]=source[key]});return target}function assertModifier(predicate,defaultMessage){return function(){assertPredicate(predicate,arguments,defaultMessage)}}function assertPredicate(predicate,args,defaultMessage){var argCount=predicate.l||predicate.length;var message=args[argCount];var ErrorType=args[argCount+1];assertImpl(predicate.apply(null,args),nonEmptyString(message)?message:defaultMessage,isFunction(ErrorType)?ErrorType:TypeError)}function assertImpl(value,message,ErrorType){if(value===false){throw new(ErrorType||Error)(message||"Assertion failed")}}function notModifier(predicate){var modifiedPredicate=function(){return notImpl(predicate.apply(null,arguments))};modifiedPredicate.l=predicate.length;return modifiedPredicate}function notImpl(value){return!value}function maybeModifier(predicate){var modifiedPredicate=function(){if(not.assigned(arguments[0])){return true}return predicate.apply(null,arguments)};modifiedPredicate.l=predicate.length;modifiedPredicate.m=true;return modifiedPredicate}function maybeImpl(value){if(assigned(value)===false){return true}return value}function ofModifier(target,type,predicate){var modifiedPredicate=function(){var collection,args;collection=arguments[0];if(target==="maybe"&&not.assigned(collection)){return true}if(!type(collection)){return false}collection=coerceCollection(type,collection);args=slice.call(arguments,1);try{collection.forEach(function(item){if((target!=="maybe"||assigned(item))&&!predicate.apply(null,[item].concat(args))){throw 0}})}catch(ignore){return false}return true};modifiedPredicate.l=predicate.length;return modifiedPredicate}function coerceCollection(type,collection){switch(type){case arrayLike:return slice.call(collection);case object:return Object.keys(collection).map(function(key){return collection[key]});default:return collection}}function createModifiedPredicates(modifier,object){return createModifiedFunctions([modifier,predicates,object])}function createModifiedFunctions(args){var modifier,object,functions,result;modifier=args.shift();object=args.pop();functions=args.pop();result=object||{};Object.keys(functions).forEach(function(key){Object.defineProperty(result,key,{configurable:false,enumerable:true,writable:false,value:modifier.apply(null,args.concat(functions[key],messages[key]))})});return result}function createModifiedModifier(modifier,modified){return createModifiedFunctions([modifier,modified,null])}function createOfPredicates(key){predicates[key].of=createModifiedFunctions([ofModifier.bind(null,null),predicates[key],predicates,null])}function createOfModifiers(base,modifier){collections.forEach(function(key){base[key].of=createModifiedModifier(modifier,predicates[key].of)})}function createMaybeOfModifiers(key){maybe[key].of=createModifiedFunctions([ofModifier.bind(null,"maybe"),predicates[key],predicates,null]);assert.maybe[key].of=createModifiedModifier(assertModifier,maybe[key].of);assert.not[key].of=createModifiedModifier(assertModifier,not[key].of)}function exportFunctions(functions){if(typeof define==="function"&&define.amd){define(function(){return functions})}else if(typeof module!=="undefined"&&module!==null&&module.exports){module.exports=functions}else{globals.check=functions}}})(this)},{}]},{},[1]);
